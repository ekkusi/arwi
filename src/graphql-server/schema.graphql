type Query {
  getTeacher(id: ID!): Teacher!
  getTeachers: [Teacher!]!
  getClasses(teacherId: ID!): [Class!]!
  getClass(id: ID!): Class!
}

type Mutation {
  register(data: CreateTeacherInput!): Teacher!
  login(email: String!, password: String!): LoginResult!
  createClass(data: CreateClassInput!): Class!
  createCollection(data: CreateCollectionInput!, classId: ID!): EvaluationCollection!
  addEvaluations(data: [CreateEvaluationInput!]!, collectionId: ID!): Int!
}

type Teacher {
  id: ID!
  email: EmailAddress!
  classes: [Class!]!
}

type LoginResult {
  teacher: Teacher!
}


type Class {
  id: ID!
  name: String!
  evaluationCollections: [EvaluationCollection!]!
  students: [Student!]!
  evaluationTypes: [String!]
  teacher: Teacher!
}

type EvaluationCollection {
  id: ID!
  date: Date!
  type: String!
  description: String
  evaluations: [Evaluation!]!
  class: Class!
}

type Evaluation {
  id: ID!
  student: Student!
  skillsRating: Int
  behaviourRating: Int
  notes: String
  collection: EvaluationCollection!
}

type Student {
  id: ID!
  name: String!
  class: Class!
  evaluations: [Evaluation!]!
}

input CreateTeacherInput {
  email: EmailAddress!
  password: String!
}


input CreateClassInput {
  name: String!
  teacherId: ID!
  students: [CreateStudentInput!]
}

input CreateStudentInput {
  name: String!
}

input CreateCollectionInput {
  date: Date!
  type: String!
  description: String
  evaluations: [CreateEvaluationInput!]
}

input CreateEvaluationInput {
  studentId: ID!
  skillsRating: Int
  behaviourRating: Int
  notes: String
}