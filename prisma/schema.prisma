generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                    String  @id @default(uuid())
  email                 String  @unique
  passwordHash          String
  groups                Group[]
}

model Group {
  id                    String                 @id @default(uuid())
  name                  String
  subjectCode           String
  students              Student[]
  classYears            ClassYear[]
  currentYearCode       ClassYearCode
  teacher               Teacher                @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId             String
  updatedAt             DateTime               @updatedAt @default(now())
}

model ClassYear {
  id                    String                 @id @default(uuid())
  code                  ClassYearCode
  group                 Group                   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId               String
  students              Student[]
  evaluationCollections EvaluationCollection[]
}

model EvaluationCollection {
  id                      String       @id @default(uuid())
  date                    DateTime     @default(now())
  type                    String
  learningObjectiveCodes  String[]
  description             String?
  evaluations             Evaluation[]
  environmentCode         String
  classYear               ClassYear        @relation(fields: [classYearId], references: [id], onDelete: Cascade)
  classYearId             String
}

model Evaluation {
  id                     String               @id @default(uuid())
  student                Student              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  wasPresent             Boolean              @default(true)
  studentId              String
  skillsRating           Rating?
  behaviourRating        Rating?
  notes                  String?
  hasStar                Boolean?
  someTestField                Boolean?
  evaluationCollection   EvaluationCollection @relation(fields: [evaluationCollectionId], references: [id], onDelete: Cascade)
  evaluationCollectionId String
}

model Student {
  id          String       @id @default(uuid())
  name        String
  group       Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  classYears  ClassYear[]  
  evaluations Evaluation[]
}

enum Rating {
  POOR
  FAIR
  GOOD
  GREAT
  EXCELLENT
}

enum ClassYearCode {
  PRIMARY_FIRST
  PRIMARY_SECOND
  PRIMARY_THIRD
  PRIMARY_FOURTH
  PRIMARY_FIFTH
  PRIMARY_SIXTH
  PRIMARY_SEVENTH
  PRIMARY_EIGHTH
  PRIMARY_NINTH
  HIGH_SCHOOL_FIRST
  HIGH_SCHOOL_SECOND
  HIGH_SCHOOL_THIRD
  VOCATIONAL_FIRST
  VOCATIONAL_SECOND
  VOCATIONAL_THIRD
  VOCATIONAL_FOURTH
}