Write me a test suite for a graphql resolver. Write the whole file. Write at least one test entirely and others can be skeletons. Here is the resolver:

Below you will have the necessary context:

Validator function(s) code:

Other used functions:

Graphql definition(s):

type Query {
  getAppMetadata: AppMetadata!
  getCurrentUser: Teacher!
  getTeacher(id: ID!): Teacher!
  getGroups(teacherId: ID!): [Group!]!
  getGroup(id: ID!): Group!
  getCollection(id: ID!): EvaluationCollection!
  getType(id: ID!): CollectionType!
  getStudent(id: ID!): Student!
  getEvaluation(id: ID!): Evaluation!
}

type Mutation {
  register(data: CreateTeacherInput!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  mPassIDLogin(code: String!): MPassIDAuthPayload!
  requestPasswordReset(email: String!): Boolean!
  verifyPasswordResetCode(code: String!): Boolean!
  updatePassword(recoveryCode: String!, newPassword: String!): Boolean!
  connectMPassID(code: String!): AuthPayload!
  connectLocalCredentials(email: String!, password: String!): AuthPayload!
  logout: Boolean!
  createGroup(data: CreateGroupInput!): Group!
  createClassParticipationCollection(data: CreateClassParticipationCollectionInput!, moduleId: ID!): ClassParticipationCollection!
  createDefaultCollection(data: CreateDefaultCollectionInput!, moduleId: ID!): DefaultCollection!
  createStudent(data: CreateStudentInput!, moduleId: ID!): Student!
  updateClassParticipationCollection(data: UpdateClassParticipationCollectionInput!, collectionId: ID!): ClassParticipationCollection!
  updateDefaultCollection(data: UpdateDefaultCollectionInput!, collectionId: ID!): DefaultCollection!
  updateStudent(data: UpdateStudentInput!, studentId: ID!): Student!
  updateGroup(data: UpdateGroupInput!, groupId: ID!): Group!
  updateClassParticipationEvaluation(input: UpdateClassParticipationEvaluationInput!): ClassParticipationEvaluation!
  updateDefaultEvaluation(input: UpdateDefaultEvaluationInput!): DefaultEvaluation!
  deleteStudent(studentId: ID!): Student!
  deleteTeacher(teacherId: ID!): Teacher!
  deleteGroup(groupId: ID!): Group!
  deleteCollection(collectionId: ID!): EvaluationCollection!
  changeGroupModule(data: ChangeGroupModuleInput!, groupId: ID!): Group!
  generateStudentFeedback(studentId: ID!, moduleId: ID!): String!
  fixTextGrammatics(studentId: ID!, text: String!): String!
}

type AppMetadata {
  appVersion: String!
  minimumSupportedAppVersion: String!
}

type AuthPayload {
  userData: Teacher!
}

type MPassIDAuthPayload {
  payload: AuthPayload!
  newUserCreated: Boolean!
}

type Teacher {
  id: ID!
  email: EmailAddress
  groups: [Group!]!
  languagePreference: String!
  consentsAnalytics: Boolean!
  isMPassIDConnected: Boolean!
}

type LoginResult {
  userData: Teacher!
}

type TranslatedString {
  fi: String!
  en: String
  se: String
}

enum LearningObjectiveType {
  BEHAVIOUR
  SKILLS
  SKILLS_AND_BEHAVIOUR
  NOT_EVALUATED
}

type LearningObjective {
  code: ID!
  label: TranslatedString!
  description: TranslatedString!
  type: LearningObjectiveType!
  color: String!
}

type Subject {
  code: ID!
  label: TranslatedString!
  environments: [Environment!]!
}

type Environment {
  code: ID!
  color: String!
  label: TranslatedString!
  subject: Subject!
}

type Group {
  id: ID!
  name: String!
  students: [Student!]!
  subject: Subject!
  teacher: Teacher!
  updatedAt: DateTime!
  archived: Boolean!
  currentModule: Module!
  modules: [Module!]!
}

type CollectionType {
  id: ID!
  category:    CollectionTypeCategory!
  name:        String!
  weight:      Int!
  module: Module!
  defaultTypeCollection: DefaultCollection
}

enum CollectionTypeCategory {
  CLASS_PARTICIPATION
  EXAM
  WRITTEN_WORK
  GROUP_WORK
  OTHER
}

type ModuleInfo {
  educationLevel: EducationLevel!
  learningObjectiveGroupKey: String!
  label: TranslatedString!
}

type Module {
  id: ID!
  info: ModuleInfo!
  evaluationCollections: [EvaluationCollection!]!
  students: [Student!]!
  group: Group!
  collectionTypes: [CollectionType!]!
}

interface EvaluationCollection {
  id: ID!
  date: Date!
  type: CollectionType!
  description: String
  evaluations: [Evaluation!]!
  module: Module!
}

type ClassParticipationCollection implements EvaluationCollection {
  id: ID!
  date: Date!
  type: CollectionType!
  description: String
  evaluations: [ClassParticipationEvaluation!]!
  module: Module!
  environment: Environment!
  learningObjectives: [LearningObjective!]!
}

type DefaultCollection implements EvaluationCollection {
  id: ID!
  date: Date!
  type: CollectionType!
  description: String
  evaluations: [DefaultEvaluation!]!
  module: Module!
}

interface Evaluation {
  id: ID!
  student: Student!
  wasPresent: Boolean!
  notes: String
  collection: EvaluationCollection!
}

type ClassParticipationEvaluation implements Evaluation {
  id: ID!
  student: Student!
  wasPresent: Boolean!
  notes: String
  collection: ClassParticipationCollection!
  skillsRating: Int
  behaviourRating: Int
}

type DefaultEvaluation implements Evaluation {
  id: ID!
  student: Student!
  wasPresent: Boolean!
  notes: String
  collection: DefaultCollection!
  rating: Float
}

type Student {
  id: ID!
  name: String!
  group: Group!
  currentModuleEvaluations: [Evaluation!]!
}

enum EducationLevel {
  PRIMARY_FIRST
  PRIMARY_SECOND
  PRIMARY_THIRD
  PRIMARY_FOURTH
  PRIMARY_FIFTH
  PRIMARY_SIXTH
  PRIMARY_SEVENTH
  PRIMARY_EIGHTH
  PRIMARY_NINTH
  HIGH_SCHOOL
  VOCATIONAL
}

input CreateTeacherInput {
  email: EmailAddress!
  password: String!
  languagePreference: String
  consentsAnalytics: Boolean
}

input CreateGroupInput {
  name: String!
  teacherId: ID!
  subjectCode: ID!
  educationLevel: EducationLevel!
  learningObjectiveGroupKey: String!
  students: [CreateStudentInput!]!
  collectionTypes: [CreateCollectionTypeInput!]!
}

input CreateStudentInput {
  name: String!
}

input CreateCollectionTypeInput {
  category: CollectionTypeCategory!
  name: String!
  weight: Int!
}

input UpdateGroupInput {
  name: String
  archived: Boolean
  updateCollectionTypeInputs: [UpdateCollectionTypeInput!]
  deleteCollectionTypeIds: [ID!]
  createCollectionTypeInputs: [CreateCollectionTypeInput!]
}

input UpdateCollectionTypeInput {
  id: ID!
  category: CollectionTypeCategory
  name: String
  weight: Int
}

input UpdateStudentInput {
  name: String
}

input CreateClassParticipationCollectionInput {
  date: Date!
  typeId: ID!
  environmentCode: ID!
  description: String
  learningObjectiveCodes: [ID!]!
  evaluations: [CreateClassParticipationEvaluationInput!]
}

input CreateDefaultCollectionInput {
  date: Date!
  typeId: ID!
  description: String
  evaluations: [CreateDefaultEvaluationInput!]
}

input CreateClassParticipationEvaluationInput {
  studentId: ID!
  wasPresent: Boolean!
  skillsRating: Int
  behaviourRating: Int
  notes: String
}

input CreateDefaultEvaluationInput {
  studentId: ID!
  wasPresent: Boolean!
  rating: Float
  notes: String
}

input UpdateClassParticipationCollectionInput {
  date: Date
  environmentCode: ID
  description: String
  learningObjectiveCodes: [ID!]
  evaluations: [UpdateClassParticipationEvaluationInput!]
}

input UpdateDefaultCollectionInput {
  date: Date
  description: String
  evaluations: [UpdateDefaultEvaluationInput!]
}

input UpdateClassParticipationEvaluationInput {
  id: ID!
  wasPresent: Boolean
  skillsRating: Int
  behaviourRating: Int
  notes: String
}

input UpdateDefaultEvaluationInput {
  id: ID!
  wasPresent: Boolean
  rating: Float
  notes: String
}

input ChangeGroupModuleInput {
  newEducationLevel: EducationLevel!
  newLearningObjectiveGroupKey: String!
}

The createDefaultCollection test suite to be used as an example:

import { graphql } from "../gql";
import createServer, { TestGraphQLRequest } from "../createTestServer";
import prisma from "@/prismaClient";
import { CollectionTypeCategory, CreateDefaultCollectionInput } from "../../types";
import { TestGroup, TestTeacher, VALID_LI_ENV_CODE, createTestGroup, createTestUserAndLogin } from "../testHelpers";
import { formatDate } from "../../utils/date";
import { collectionLoader, collectionsByModuleLoader } from "../../graphql/dataLoaders/collection";
import { groupLoader } from "../../graphql/dataLoaders/group";
import { isDefaultCollection } from "../../types/typeGuards";

describe("createDefaultCollection", () => {
  let graphqlRequest: TestGraphQLRequest;
  let teacher: TestTeacher;
  let group: TestGroup;

  let baseCollectionData: CreateDefaultCollectionInput;

  beforeAll(async () => {
    ({ graphqlRequest } = await createServer());

    teacher = await createTestUserAndLogin(graphqlRequest);
    group = await createTestGroup(teacher.id);

    baseCollectionData = {
      date: formatDate(new Date(), "yyyy-MM-dd"),
      description: "Test Description",
      typeId: group.currentModule.collectionTypes.find((ct) => ct.category === CollectionTypeCategory.EXAM)?.id!,
    };
  });

  afterEach(async () => {
    await prisma.evaluationCollection.deleteMany();
  });

  it("should successfully create a collection", async () => {
    const collectionData = {
      ...baseCollectionData,
      evaluations: [
        {
          studentId: group.students[0].id,
          wasPresent: true,
          rating: 7,
          notes: "Good performance",
        },
      ],
    };

    const query = graphql(`
      mutation CreateDefaultCollection($data: CreateDefaultCollectionInput!, $moduleId: ID!) {
        createDefaultCollection(data: $data, moduleId: $moduleId) {
          id
          date
          type {
            id
          }
          __typename
          description
          evaluations {
            student {
              id
            }
            __typename
            notes
            rating
          }
        }
      }
    `);

    const response = await graphqlRequest(query, { data: collectionData, moduleId: group.currentModule.id });

    expect(response.data?.createDefaultCollection).toBeDefined();
    expect(response.data?.createDefaultCollection.date).toEqual(collectionData.date);
    if (response.data && isDefaultCollection(response.data.createDefaultCollection)) {
      expect(response.data?.createDefaultCollection.evaluations.length).toEqual(collectionData.evaluations.length);
      expect(response.data?.createDefaultCollection.evaluations[0].rating).toEqual(collectionData.evaluations[0].rating);
      expect(response.data?.createDefaultCollection.evaluations[0].student.id).toEqual(collectionData.evaluations[0].studentId);
      expect(response.data?.createDefaultCollection.evaluations[0].notes).toEqual(collectionData.evaluations[0].notes);
    }
  });

  it("should throw an error if a collection with the type already exists", async () => {
    const collectionData = {
      ...baseCollectionData,
      evaluations: [
        {
          studentId: group.students[0].id,
          wasPresent: true,
          rating: 7,
          notes: "Good performance",
        },
      ],
    };

    const query = graphql(`
      mutation CreateDefaultCollectionDuplicate($data: CreateDefaultCollectionInput!, $moduleId: ID!) {
        createDefaultCollection(data: $data, moduleId: $moduleId) {
          id
        }
      }
    `);

    await graphqlRequest(query, { data: collectionData, moduleId: group.currentModule.id });
    const response = await graphqlRequest(query, { data: collectionData, moduleId: group.currentModule.id });

    expect(response.errors).toBeDefined();
    expect(response.errors![0].message).toEqual(
      `Arviointikokoelma tällä arviointityypillä on jo olemassa ja kyseisellä tyypillä niitä ei voi olla yhtä enempää.`
    );
  });

  it("should throw an error if the collection type is CLASS_PARTICIPATION type", async () => {
    const classParticipationType = group.currentModule.collectionTypes.find((ct) => ct.category === CollectionTypeCategory.CLASS_PARTICIPATION)!;

    const collectionData = {
      ...baseCollectionData,
      typeId: classParticipationType.id,
    };

    const query = graphql(`
      mutation CreateDefaultCollectionInvalidType($data: CreateDefaultCollectionInput!, $moduleId: ID!) {
        createDefaultCollection(data: $data, moduleId: $moduleId) {
          id
        }
      }
    `);

    const response = await graphqlRequest(query, { data: collectionData, moduleId: group.currentModule.id });

    expect(response.errors).toBeDefined();
    expect(response.errors![0].message).toEqual(`Syötetty arviointikokoelman tyyppi on väärä. Se ei saa olla 'CLASS_PARTICIPATION'.`);
  });

  it("should update DataLoaders after creating a collection", async () => {
    // Initial state: Load collections for a module and check initial state
    const initialCollectionsByModule = await collectionsByModuleLoader.load(group.currentModule.id);
    expect(initialCollectionsByModule).toEqual([]);

    // Load group to cache
    const initialGroupFromLoader = await groupLoader.load(group.id);

    // Create a collection
    const collectionData = {
      ...baseCollectionData,
      evaluations: [
        {
          studentId: group.students[0].id,
          wasPresent: true,
          rating: 7,
          notes: "Good performance",
        },
      ],
    };

    // Wait 2 seconds to make sure updatedAt is different
    await new Promise((resolve) => {
      setTimeout(resolve, 2000);
    });

    const query = graphql(`
      mutation CreateDefaultCollectionDataLoaderCheck($data: CreateDefaultCollectionInput!, $moduleId: ID!) {
        createDefaultCollection(data: $data, moduleId: $moduleId) {
          id
          date
        }
      }
    `);

    const createDefaultCollectionResponse = await graphqlRequest(query, { data: collectionData, moduleId: group.currentModule.id });
    const newCollection = createDefaultCollectionResponse.data?.createDefaultCollection!;
    expect(newCollection).toBeDefined();

    // Check if the collection is correctly loaded in collectionLoader
    const newCollectionFromLoader = await collectionLoader.load(newCollection.id);
    expect(newCollectionFromLoader).toEqual(expect.objectContaining({ id: newCollection.id }));

    // Check if the collectionsByModuleLoader is updated
    const updatedCollectionsByModule = await collectionsByModuleLoader.load(group.currentModule.id);
    expect(updatedCollectionsByModule.length).toEqual(1);
    expect(updatedCollectionsByModule[0]).toEqual(expect.objectContaining({ id: newCollection.id }));

    // Check if the groupLoader is updated
    const updatedGroupFromLoader = await groupLoader.load(group.id);

    expect(formatDate(updatedGroupFromLoader.updatedAt, "dd.MM.yyyy HH:mm:ss")).not.toEqual(
      formatDate(initialGroupFromLoader.updatedAt, "dd.MM.yyyy HH:mm:ss")
    );
  });
});



Keep these things in mind:
- query/mutation names have to be unique (see sample test suite)
- remember to test all the possible validation cases
- remember to test that the Dataloader caches are updated
- remember to take error messages to be checked from the thrown errors in the validators
- the error message for invalid ID is the following: "Hakemaasi resurssia ei löytynyt. Tarkista syöttämäsi id:t."
